/*******************************************************************************************
* @author           Suman
* @version          1.0 
* @date             29-MAR-2023
* @Status           In-Progress
* @Class Name     	usopc_ContentDocumentLinkTriggerHelper
* @description      This is a helper class for - usopc_ContentDocumentLinkTrigger.

*********************************************************************************************
 Version     Date      Team          Comments
*********************************************************************************************
* 1      Mar 2022    Suman          Initial Creation
*********************************************************************************************/
public with sharing class usopc_ContentDocumentLinkTriggerHelper {
    //Added by Demandblue for UOC-467 : Get the mapping between Application Rec Type & Sharepoint Folder
    public static Map<String, String> appRecTypeAndSPFolderMap = new Map<String, String>();
    
    static{
        Map<String, Application_Sharepoint_Config__mdt > applicationSharePointSettings = Application_Sharepoint_Config__mdt.getAll();
        for(String name : applicationSharePointSettings.keySet()){
            appRecTypeAndSPFolderMap.put(applicationSharePointSettings.get(name).Record_Type_Name__c, applicationSharePointSettings.get(name).Sharepoint_Folder_Name__c);
        }
    }
    
    public static Map<Id,ContentVersion> getContentDocIdAndContentVersionMap(Set<Id> contentDocIdList){
        Map<Id,ContentVersion> conDocIDAndConVersionMap = new Map<Id,ContentVersion>();
        for(ContentVersion conVerItem : [SELECT ContentDocumentId, VersionData FROM ContentVersion WHERE ContentDocumentId IN:contentDocIdList AND IsLatest = TRUE WITH SECURITY_ENFORCED]){
            conDocIDAndConVersionMap.put(conVerItem.ContentDocumentId,conVerItem);
        }
        return conDocIDAndConVersionMap;
    }
    
    public static Map<Id, usopc_Professional_Documents__c> getProfDocIdAndRecDetailMap(List<Id> profDocRecIdList){
        Map<Id, usopc_Professional_Documents__c> profDocIdAndRecMap = new Map<Id, usopc_Professional_Documents__c>();
        
        for(usopc_Professional_Documents__c profDocRec : [SELECT Id, Application__c, Application_Record_Type__c, Contact_Folder_Name_Sharepoint__c FROM usopc_Professional_Documents__c WHERE Id IN: profDocRecIdList WITH SECURITY_ENFORCED]){
            if(null != profDocRec.Application__c && !String.isBlank(profDocRec.Application_Record_Type__c) && !String.isBlank(profDocRec.Contact_Folder_Name_Sharepoint__c))
                profDocIdAndRecMap.put(profDocRec.Id, profDocRec);
        }
        
        return profDocIdAndRecMap;
    }
    
    public static String getDriveNameBasedOnAppRecType(String applicationRecTypeName){
        String driveName = 'Sport_Sciences';
        if(null != appRecTypeAndSPFolderMap && String.isNotBlank(appRecTypeAndSPFolderMap.get(applicationRecTypeName)))
                        driveName = appRecTypeAndSPFolderMap.get(applicationRecTypeName);//Sport_Sciences or Sport_Medicines

        return driveName;
    }
    
    /*
    public static Map<Id,Id> getMapOfProfDocsAssWithApp(Map<Id,Id> mapProfessionalDocumentsId, Map<Id, usopc_Professional_Documents__c> profDocIdAndRecAssWithApplicationMap) {
        Map<Id,Id> mapProfDocsIdAssWithApp = new Map<Id,Id>();
        for(Id conDocId:mapProfessionalDocumentsId.keySet()){
            if(profDocIdAndRecAssWithApplicationMap.keySet().contains(mapProfessionalDocumentsId.get(conDocId))){
                mapProfDocsIdAssWithApp.put(conDocId, mapProfessionalDocumentsId.get(conDocId));
            }
        }
        return mapProfDocsIdAssWithApp;
    }
    
    public static Map<Id,Id> getMapOfProfDocsNotAssWithApp(Map<Id,Id> mapProfessionalDocumentsId, Map<Id, usopc_Professional_Documents__c> profDocIdAndRecAssWithApplicationMap) {
        Map<Id,Id> mapProfDocsIdNotAssWithApp = new Map<Id,Id>();
        for(Id conDocId:mapProfessionalDocumentsId.keySet()){
            if(!profDocIdAndRecAssWithApplicationMap.keySet().contains(mapProfessionalDocumentsId.get(conDocId))){
                mapProfDocsIdNotAssWithApp.put(conDocId, mapProfessionalDocumentsId.get(conDocId));
            }
        }
        return mapProfDocsIdNotAssWithApp;
    }*/
}
